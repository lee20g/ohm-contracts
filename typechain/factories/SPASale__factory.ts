/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SPASale, SPASaleInterface } from "../SPASale";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_farmingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dev",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_total",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_depositeTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_BY_MINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposite",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "farmingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "investor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "left_elements",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_claimTimestamp",
        type: "uint256",
      },
    ],
    name: "setClaimTimestamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526008805460ff1916905534801561001a57600080fd5b506040516109e93803806109e9833981810160405260a081101561003d57600080fd5b508051602082015160408301516060840151608090940151600380546001600160a01b03199081166001600160a01b0396871617909155600480548216948616949094179093556005805490931693909116929092179055600091825560065561093c9081906100ad90396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638ad5de281161008c578063a50ec32611610066578063a50ec326146101b1578063ad24dce7146101b9578063c55dae63146101c1578063c884ef83146101c9576100cf565b80638ad5de281461017d5780638d859f3e1461018557806391cca3db1461018d576100cf565b80631b1cd4ff146100d45780632dec9d1c1461010e5780634e71d92d1461012857806351cff8d9146101325780636c9230db14610158578063894f849814610160575b600080fd5b6100fa600480360360208110156100ea57600080fd5b50356001600160a01b03166101ef565b604080519115158252519081900360200190f35b610116610204565b60408051918252519081900360200190f35b61013061020a565b005b6101306004803603602081101561014857600080fd5b50356001600160a01b03166104ab565b6101166105f7565b6101306004803603602081101561017657600080fd5b50356105fb565b610116610655565b61011661065a565b61019561065f565b604080516001600160a01b039092168252519081900360200190f35b61013061066e565b6101956108d3565b6101956108e2565b6100fa600480360360208110156101df57600080fd5b50356001600160a01b03166108f1565b60016020526000908152604090205460ff1681565b60005481565b333214610247576040805162461bcd60e51b8152602060048083019190915260248201526321454f4160e01b604482015290519081900360640190fd5b60085460ff16610286576040805162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b604482015290519081900360640190fd5b4260075411156102c6576040805162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b604482015290519081900360640190fd5b3360009081526001602052604090205460ff16610319576040805162461bcd60e51b815260206004820152600c60248201526b3737ba1034b73b32b9ba37b960a11b604482015290519081900360640190fd5b3360009081526002602052604090205460ff1615610368576040805162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b604482015290519081900360640190fd5b33600081815260026020908152604091829020805460ff1916600117905560048054835163313ce56760e01b815293516001600160a01b03919091169463a9059cbb949093869363313ce5679383820193909190829003018186803b1580156103d057600080fd5b505afa1580156103e4573d6000803e3d6000fd5b505050506040513d60208110156103fa57600080fd5b50516040805160e085901b6001600160e01b03191681526001600160a01b0393909316600484015260ff909116600a0a603c0260248301525160448083019260209291908290030181600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b505050506040513d602081101561047e57600080fd5b50506040517f3158952e7c791deb52750003dbcb0fb942106f2bcd1005fb946a83cd6646fdc490600090a1565b6005546001600160a01b031633146104f3576040805162461bcd60e51b8152602060048083019190915260248201526310b232bb60e11b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561054257600080fd5b505afa158015610556573d6000803e3d6000fd5b505050506040513d602081101561056c57600080fd5b50516005546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d60208110156105f157600080fd5b50505050565b4290565b6005546001600160a01b03163314610643576040805162461bcd60e51b8152602060048083019190915260248201526310b232bb60e11b604482015290519081900360640190fd5b6007556008805460ff19166001179055565b603c81565b600a81565b6005546001600160a01b031681565b3332146106ab576040805162461bcd60e51b8152602060048083019190915260248201526321454f4160e01b604482015290519081900360640190fd5b4260065411156106eb576040805162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b604482015290519081900360640190fd5b600080541161072c576040805162461bcd60e51b81526020600482015260086024820152671cd85b19481bdd5d60c21b604482015290519081900360640190fd5b3360009081526001602052604090205460ff161561077d576040805162461bcd60e51b815260206004820152600960248201526819195c1bdcda5d195960ba1b604482015290519081900360640190fd5b6003546040805163313ce56760e01b815290516001600160a01b03909216916323b872dd9133913091859163313ce56791600480820192602092909190829003018186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d60208110156107f857600080fd5b50516040805160e086901b6001600160e01b03191681526001600160a01b03948516600482015292909316602483015260ff16600a0a610258026044820152905160648083019260209291908290030181600087803b15801561085a57600080fd5b505af115801561086e573d6000803e3d6000fd5b505050506040513d602081101561088457600080fd5b5050336000908152600160208190526040808320805460ff19169092179091558154600019018255517fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c2680709190a1565b6004546001600160a01b031681565b6003546001600160a01b031681565b60026020526000908152604090205460ff168156fea2646970667358221220198bf549bd1eebe2d05683f6095ffd7a94388ebabcff72cd3783a8983047335964736f6c63430007050033";

export class SPASale__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _baseToken: string,
    _farmingToken: string,
    _dev: string,
    _total: BigNumberish,
    _depositeTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SPASale> {
    return super.deploy(
      _baseToken,
      _farmingToken,
      _dev,
      _total,
      _depositeTimestamp,
      overrides || {}
    ) as Promise<SPASale>;
  }
  getDeployTransaction(
    _baseToken: string,
    _farmingToken: string,
    _dev: string,
    _total: BigNumberish,
    _depositeTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _baseToken,
      _farmingToken,
      _dev,
      _total,
      _depositeTimestamp,
      overrides || {}
    );
  }
  attach(address: string): SPASale {
    return super.attach(address) as SPASale;
  }
  connect(signer: Signer): SPASale__factory {
    return super.connect(signer) as SPASale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SPASaleInterface {
    return new utils.Interface(_abi) as SPASaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SPASale {
    return new Contract(address, _abi, signerOrProvider) as SPASale;
  }
}
